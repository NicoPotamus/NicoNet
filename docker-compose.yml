services:
  client:
    build: 
      context: ./client
    ports:
      - "${CLIENT_PORT}:${CLIENT_PORT}"
    env_file:
      - .env
    environment:
      - NODE_ENV=${NODE_ENV}
      - NEXT_PUBLIC_SERVER_URL=${SERVER_URL}
      - PORT=${CLIENT_PORT}
    depends_on:
      - server
    restart: always
    # Add healthcheck to ensure proper cleanup
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${CLIENT_PORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  server:
    build: 
      context: ./server
    ports:
      - "${PORT}:${PORT}"
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - JWT_SECRET=${JWT_SECRET}
      - NODE_ENV=${NODE_ENV}
      - CLIENT_URL=${CLIENT_URL}
      - SERVER_URL=${SERVER_URL}
      - ADMIN_USERNAME=${ADMIN_USERNAME}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - CLOUDFLARE_DOMAIN=${CLOUDFLARE_DOMAIN}
      - CLOUDFLARE_ZONE_ID=${CLOUDFLARE_ZONE_ID}
      - CLOUDFLARE_ACCOUNT_ID=${CLOUDFLARE_ACCOUNT_ID}
      - CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN}
    env_file:
      - .env
    depends_on:
      - db
    restart: always
    # Add healthcheck
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db:/docker-entrypoint-initdb.d
    restart: always
    # Add healthcheck
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  postgres_data:

